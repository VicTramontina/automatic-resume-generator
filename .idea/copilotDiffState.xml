<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.dockerignore" />
              <option name="originalContent" value="# Ignorar arquivos desnecessários no build Docker&#10;.venv/&#10;__pycache__/&#10;*.pyc&#10;*.pyo&#10;*.pyd&#10;.Python&#10;env/&#10;venv/&#10;.env&#10;.git/&#10;.gitignore&#10;*.md&#10;.DS_Store&#10;Thumbs.db&#10;&#10;" />
              <option name="updatedContent" value="# Ignorar arquivos desnecessários no build Docker&#10;.venv/&#10;__pycache__/&#10;*.pyc&#10;*.pyo&#10;*.pyd&#10;.Python&#10;env/&#10;venv/&#10;.env&#10;.git/&#10;.gitignore&#10;*.md&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Arquivos de instalação local (não mais usados)&#10;pip-wheel-metadata/&#10;.tox/&#10;.coverage&#10;.pytest_cache/&#10;.mypy_cache/&#10;.dmypy.json&#10;dmypy.json&#10;&#10;# Arquivos de output que serão regenerados&#10;outputs/*&#10;!outputs/.gitkeep&#10;&#10;# Logs e arquivos temporários LaTeX&#10;*.log&#10;*.aux&#10;*.bbl&#10;*.bcf&#10;*.blg&#10;*.run.xml&#10;*.fls&#10;*.fdb_latexmk&#10;*.synctex.gz" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Makefile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Makefile" />
              <option name="originalContent" value="VENV := .venv&#10;PYTHON := $(VENV)/bin/python&#10;PIP := $(VENV)/bin/pip&#10;&#10;.PHONY: setup lint run clean docker-build docker-run docker-shell docker-clean help&#10;&#10;# Comandos tradicionais (instalação local)&#10;docker-run:&#10;&#10;$(VENV)/bin/activate: requirements.txt&#10;&#9;python3 -m venv $(VENV)&#10;docker-shell:&#10;&#9;$(PIP) install -r requirements.txt&#10;&#9;touch $(VENV)/bin/activate&#10;PYTHON := $(VENV)/bin/python&#10;docker-clean:&#10;&#9;$(PYTHON) -m py_compile scripts/*.py&#10;PYTHON := $(VENV)/bin/python&#10;run: lint&#10;&#9;$(PYTHON) scripts/main.py&#10;&#10;clean:&#10;&#9;rm -rf $(VENV)&#10;&#9;find outputs -mindepth 1 ! -name &quot;.gitkeep&quot; -delete&#10;&#9;@echo &quot; Comandos disponíveis:&quot;&#10;# Comandos Docker (recomendados)&#10;&#9;@echo &quot;DOCKER (Recomendado - sem necessidade de instalar dependências):&quot;&#10;&#9;@echo &quot;  make docker-build  - Constrói a imagem Docker&quot;&#10;&#9;@echo &quot;  make docker-run    - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;  make docker-shell  - Abre shell interativo no container&quot;&#10;&#9;@echo &quot;  make docker-clean  - Remove containers e imagens Docker&quot;&#10;&#9;@echo &quot;  make run           - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;INSTALAÇÃO LOCAL (requer Python, LaTeX, Chrome, etc.):&quot;&#10;&#9;@echo &quot;  make setup         - Configura ambiente virtual Python&quot;&#10;&#9;@echo &quot;  make lint          - Verifica sintaxe dos scripts Python&quot;&#10;&#9;@echo &quot;  make run           - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;  make clean         - Remove ambiente virtual e outputs&quot;&#10;lint: $(VENV)/bin/activate&#10;&#9;$(PYTHON) -m py_compile scripts/*.py&#10;&#9;@echo &quot;Para mais informações sobre Docker: ./docker-run.sh help&quot;&#10;&#10;clean:&#10;&#9;rm -rf $(VENV)&#10;&#9;find outputs -mindepth 1 ! -name &quot;.gitkeep&quot; -delete&#10;&#10;# Comandos Docker (recomendados)&#10;docker-build:&#10;.PHONY: setup lint run clean docker-build docker-run docker-shell docker-clean help&#10;&#10;$(VENV)/bin/activate: requirements.txt&#10;&#9;python3 -m venv $(VENV)&#10;docker-shell:&#10;&#9;$(PIP) install -r requirements.txt&#10;&#9;touch $(VENV)/bin/activate&#10;&#10;docker-clean:&#10;&#9;$(PYTHON) -m py_compile scripts/*.py&#10;PYTHON := $(VENV)/bin/python&#10;run: lint&#10;&#9;$(PYTHON) scripts/main.py&#10;&#10;clean:&#10;&#9;rm -rf $(VENV)&#10;&#9;find outputs -mindepth 1 ! -name &quot;.gitkeep&quot; -delete&#10;&#9;@echo &quot; Comandos disponíveis:&quot;&#10;# Comandos Docker (recomendados)&#10;&#9;@echo &quot;DOCKER (Recomendado - sem necessidade de instalar dependências):&quot;&#10;&#9;@echo &quot;  make docker-build  - Constrói a imagem Docker&quot;&#10;&#9;@echo &quot;  make docker-run    - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;INSTALAÇÃO LOCAL (requer Python, LaTeX, Chrome, etc.):&quot;&#10;&#9;@echo &quot;  make setup         - Configura ambiente virtual Python&quot;&#10;&#9;@echo &quot;  make lint          - Verifica sintaxe dos scripts Python&quot;&#10;&#9;@echo &quot;  make run           - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;  make clean         - Remove ambiente virtual e outputs&quot;&#10;&#9;$(PIP) install -r requirements.txt&#10;&#9;touch $(VENV)/bin/activate&#10;&#10;lint: $(VENV)/bin/activate&#10;&#9;$(PYTHON) -m py_compile scripts/*.py&#10;&#9;@echo &quot;Para mais informações sobre Docker: ./docker-run.sh help&quot;&#10;&#10;clean:&#10;&#9;rm -rf $(VENV)&#10;&#9;find outputs -mindepth 1 ! -name &quot;.gitkeep&quot; -delete&#10;&#10;# Comandos Docker (recomendados)&#10;docker-build:&#10;&#9;@echo &quot; Construindo imagem Docker...&quot;&#10;&#9;./docker-run.sh build&#10;&#10;docker-run:&#10;&#9;@echo &quot; Executando gerador de currículos com Docker...&quot;&#10;&#9;./docker-run.sh run&#10;&#10;docker-shell:&#10;&#9;@echo &quot; Abrindo shell interativo no container...&quot;&#10;&#9;./docker-run.sh shell&#10;&#10;docker-clean:&#10;&#9;@echo &quot; Limpando containers e imagens Docker...&quot;&#10;&#9;./docker-run.sh clean&#10;&#10;# Ajuda&#10;help:&#10;&#9;@echo &quot; Comandos disponíveis:&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot;DOCKER (Recomendado - sem necessidade de instalar dependências):&quot;&#10;&#9;@echo &quot;  make docker-build  - Constrói a imagem Docker&quot;&#10;&#9;@echo &quot;  make docker-run    - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;  make docker-shell  - Abre shell interativo no container&quot;&#10;&#9;@echo &quot;  make docker-clean  - Remove containers e imagens Docker&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot;INSTALAÇÃO LOCAL (requer Python, LaTeX, Chrome, etc.):&quot;&#10;&#9;@echo &quot;  make setup         - Configura ambiente virtual Python&quot;&#10;&#9;@echo &quot;  make lint          - Verifica sintaxe dos scripts Python&quot;&#10;&#9;@echo &quot;  make run           - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;  make clean         - Remove ambiente virtual e outputs&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot;Para mais informações sobre Docker: ./docker-run.sh help&quot;&#10;" />
              <option name="updatedContent" value=".PHONY: build run shell clean help&#10;&#10;# Comandos Docker&#10;build:&#10;&#9;@echo &quot; Construindo imagem Docker...&quot;&#10;&#9;./docker-run.sh build&#10;&#10;run:&#10;&#9;@echo &quot; Executando gerador de currículos com Docker...&quot;&#10;&#9;./docker-run.sh run&#10;&#10;shell:&#10;&#9;@echo &quot; Abrindo shell interativo no container...&quot;&#10;&#9;./docker-run.sh shell&#10;&#10;clean:&#10;&#9;@echo &quot; Limpando containers e imagens Docker...&quot;&#10;&#9;./docker-run.sh clean&#10;&#10;# Comando padrão&#10;all: run&#10;&#10;# Ajuda&#10;help:&#10;&#9;@echo &quot; Gerador de Currículos - Comandos Docker&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot;COMANDOS DISPONÍVEIS:&quot;&#10;&#9;@echo &quot;  make build   - Constrói a imagem Docker&quot;&#10;&#9;@echo &quot;  make run     - Executa o gerador de currículos&quot;&#10;&#9;@echo &quot;  make shell   - Abre shell interativo no container&quot;&#10;&#9;@echo &quot;  make clean   - Remove containers e imagens Docker&quot;&#10;&#9;@echo &quot;  make help    - Mostra esta ajuda&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot;EXEMPLO DE USO:&quot;&#10;&#9;@echo &quot;  make build &amp;&amp; make run&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot;Para comandos avançados: ./docker-run.sh help&quot;&#10;&#9;@echo &quot;&quot;&#10;&#9;@echo &quot; Este projeto usa exclusivamente Docker para eliminar&quot;&#10;&#9;@echo &quot;   problemas de dependências entre sistemas operacionais.&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README-DOCKER.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README-DOCKER.md" />
              <option name="updatedContent" value="# Currículo Automático&#10;&#10;Este projeto automatiza a busca de vagas remotas, a personalização de um currículo em LaTeX e a geração de PDFs específicos para cada vaga encontrada. O fluxo geral é:&#10;&#10;1. **Coletar vagas** definidas em `config/job_config.yaml`.&#10;2. **Analisar** cada vaga com a API do Gemini para adaptar o currículo.&#10;3. **Gerar saída** em `outputs/` contendo um resumo (`job.md`) e o PDF do currículo ajustado para cada vaga.&#10;&#10;##  Uso com Docker (Recomendado)&#10;&#10;**Vantagem**: Não precisa instalar nada no seu computador além do Docker! Todas as dependências (Python, LaTeX, Chrome, etc.) são gerenciadas automaticamente.&#10;&#10;### Pré-requisitos&#10;- [Docker](https://docs.docker.com/get-docker/)&#10;- [Docker Compose](https://docs.docker.com/compose/install/)&#10;&#10;### Uso Rápido&#10;&#10;1. **Configure sua API key do Gemini**:&#10;   ```bash&#10;   export GEMINI_API_KEY=&quot;sua_chave_aqui&quot;&#10;   ```&#10;&#10;2. **Construa e execute**:&#10;   ```bash&#10;   # Constrói a imagem Docker&#10;   make docker-build&#10;   &#10;   # Executa o gerador de currículos&#10;   make docker-run&#10;   ```&#10;&#10;### Comandos Docker Disponíveis&#10;&#10;```bash&#10;make docker-build   # Constrói a imagem Docker&#10;make docker-run     # Executa o gerador de currículos&#10;make docker-shell   # Abre shell interativo no container&#10;make docker-clean   # Remove containers e imagens Docker&#10;make help          # Mostra todos os comandos&#10;```&#10;&#10;### Script Docker Alternativo&#10;&#10;Você também pode usar o script `docker-run.sh` diretamente:&#10;&#10;```bash&#10;./docker-run.sh build                    # Constrói a imagem&#10;./docker-run.sh run                      # Executa o gerador&#10;./docker-run.sh shell                    # Abre shell interativo&#10;./docker-run.sh python3 scripts/main.py # Executa comando customizado&#10;./docker-run.sh help                     # Mostra ajuda detalhada&#10;```&#10;&#10;##  Instalação Local (Alternativa)&#10;&#10;**Aviso**: Requer instalar Python, LaTeX, Chrome e outras dependências manualmente.&#10;&#10;### Dependências do Sistema&#10;- Python 3.8+&#10;- LaTeX (texlive-full recomendado)&#10;- Google Chrome ou Chromium&#10;- ChromeDriver&#10;&#10;### Ubuntu/Debian&#10;```bash&#10;sudo apt update&#10;sudo apt install python3 python3-pip python3-venv texlive-full chromium-browser chromium-chromedriver&#10;```&#10;&#10;### Comandos de Instalação Local&#10;```bash&#10;make setup   # cria ambiente virtual e instala dependências&#10;make lint    # verifica sintaxe dos scripts Python&#10;make run     # roda a pipeline completa&#10;make clean   # remove ambiente virtual e saídas geradas&#10;```&#10;&#10;##  Configuração&#10;&#10;### API do Gemini&#10;1. Obtenha uma chave da API em [Google AI Studio](https://makersuite.google.com/app/apikey)&#10;2. Configure a variável de ambiente:&#10;   ```bash&#10;   export GEMINI_API_KEY=&quot;sua_chave_aqui&quot;&#10;   ```&#10;&#10;### Configuração de Vagas&#10;Edite `config/job_config.yaml` para definir os sites e critérios de busca de vagas.&#10;&#10;##  Organização do projeto&#10;&#10;```&#10;├── config/          # Arquivos de configuração&#10;│   └── job_config.yaml&#10;├── latex/           # Modelo base do currículo em LaTeX&#10;├── outputs/         # Resultados gerados (um diretório por vaga)&#10;├── scripts/         # Scripts Python de automação&#10;├── Dockerfile       # Definição da imagem Docker&#10;├── docker-compose.yml # Configuração Docker Compose&#10;├── docker-run.sh    # Script conveniente para Docker&#10;└── Makefile         # Alvos para instalação, lint e execução&#10;```&#10;&#10;##  Como Funciona&#10;&#10;### Funcionalidades de Web Scraping&#10;&#10;1. **Extração de Páginas Individuais de Vagas**: O sistema pode seguir links das vagas para extrair informações mais detalhadas.&#10;&#10;2. **Navegação por Páginas (Paginação)**: Suporta três tipos:&#10;   - **`next_button`**: Segue botões &quot;próxima página&quot;&#10;   - **`numbered_links`**: Extrai links numerados de paginação  &#10;   - **`url_pattern`**: Gera URLs baseado em padrão (ex: `?page={page}`)&#10;&#10;3. **Melhorias de Robustez**:&#10;   - Headers User-Agent realistas&#10;   - Tratamento de erros robusto&#10;   - Logs detalhados do progresso&#10;   - Rate limiting automático (1s entre páginas, 0.5s entre vagas)&#10;&#10;### Pipeline de Geração&#10;&#10;1. **Scraping**: Coleta vagas dos sites configurados&#10;2. **Análise**: Usa Gemini AI para personalizar o currículo&#10;3. **Compilação**: Gera PDF com LaTeX&#10;4. **Organização**: Salva tudo em `outputs/job_X/`&#10;&#10;##  Solução de Problemas&#10;&#10;### Problemas Comuns&#10;&#10;**Erro de dependências**: Use Docker para evitar problemas de compatibilidade entre sistemas.&#10;&#10;**Erro de LaTeX**: Verifique se todas as fontes estão disponíveis no container.&#10;&#10;**Selenium/Chrome**: O Docker já configura automaticamente um ambiente virtual com Xvfb.&#10;&#10;### Debug&#10;&#10;Para debugar problemas, use o shell interativo:&#10;```bash&#10;make docker-shell&#10;# ou&#10;./docker-run.sh shell&#10;```&#10;&#10;##  Contribuindo&#10;&#10;1. Use Docker para desenvolvimento consistente&#10;2. Teste suas mudanças com `make docker-build &amp;&amp; make docker-run`&#10;3. Mantenha a documentação atualizada&#10;&#10;##  Vantagens da Solução Docker&#10;&#10;✅ **Zero configuração**: Não precisa instalar dependências  &#10;✅ **Multiplataforma**: Funciona em Windows, macOS, Linux  &#10;✅ **Isolamento**: Não interfere com seu sistema  &#10;✅ **Reproduzível**: Mesmo ambiente para todos  &#10;✅ **Fácil limpeza**: `make docker-clean` remove tudo" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README_NEW.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README_NEW.md" />
              <option name="updatedContent" value="# Currículo Automático&#10;&#10;Este projeto automatiza a busca de vagas remotas, a personalização de um currículo em LaTeX e a geração de PDFs específicos para cada vaga encontrada. O fluxo geral é:&#10;&#10;1. **Coletar vagas** definidas em `config/job_config.yaml`.&#10;2. **Analisar** cada vaga com a API do Gemini para adaptar o currículo.&#10;3. **Gerar saída** em `outputs/` contendo um resumo (`job.md`) e o PDF do currículo ajustado para cada vaga.&#10;&#10;## Organização do projeto&#10;&#10;```&#10;├── config/          # Arquivos de configuração&#10;│   └── job_config.yaml&#10;├── latex/           # Modelo base do currículo em LaTeX&#10;├── outputs/         # Resultados gerados (um diretório por vaga)&#10;├── scripts/         # Scripts Python de automação&#10;└── Makefile         # Alvos para instalação, lint e execução&#10;```&#10;&#10;## Usando o Makefile&#10;&#10;```bash&#10;make setup   # cria ambiente virtual e instala dependências&#10;make lint    # verifica sintaxe dos scripts Python&#10;make run     # roda a pipeline completa&#10;make clean   # remove ambiente virtual e saídas geradas&#10;```&#10;&#10;Para personalizar o currículo, defina a variável de ambiente `GEMINI_API_KEY` com sua chave da API do Gemini antes de executar `make run`.&#10;&#10;## Funcionalidades Avançadas de Web Scraping&#10;&#10;### 1. Extração de Páginas Individuais de Vagas&#10;&#10;O sistema agora pode seguir links das vagas para extrair informações mais detalhadas das páginas individuais.&#10;&#10;### 2. Navegação por Páginas (Paginação)&#10;&#10;O sistema suporta três tipos de paginação:&#10;&#10;- **`next_button`**: Segue botões &quot;próxima página&quot; até não existir mais&#10;- **`numbered_links`**: Extrai links numerados de paginação  &#10;- **`url_pattern`**: Gera URLs baseado em um padrão (ex: `?page={page}`)&#10;&#10;### 3. Melhorias de Robustez&#10;&#10;- Headers de User-Agent realistas para evitar bloqueios&#10;- Tratamento de erros que permite continuar mesmo se algumas páginas falharem&#10;- Logs detalhados do progresso do scraping&#10;- Rate limiting automático entre requisições (1s entre páginas, 0.5s entre vagas)&#10;&#10;## Configuração das vagas (`job_config.yaml`)&#10;&#10;O arquivo `config/job_config.yaml` controla tanto o que será buscado quanto os filtros aplicados às vagas. Os principais parâmetros são:&#10;&#10;- `skills`: lista de palavras-chave que devem aparecer na vaga. Se nenhuma estiver presente, a vaga é ignorada.&#10;- `salary`:&#10;  - `usd`: salário mínimo em dólares (USD).&#10;  - `brl`: salário mínimo em reais (BRL).&#10;- `sites`: lista de sites a serem raspados. Cada site contém:&#10;  - `name`: nome do site.&#10;  - `url`: endereço da página de vagas.&#10;  - `job_selector`: seletor CSS que identifica cada card de vaga na página.&#10;  - `fields`: mapeamento de campos desejados para seletores CSS relativos ao card:&#10;    - `title`: título da vaga&#10;    - `company`: nome da empresa&#10;    - `link`: **OBRIGATÓRIO** - link para a página individual da vaga&#10;  - `detail_fields`: campos extraídos da página individual da vaga:&#10;    - `description`: descrição completa&#10;    - `salary`: informações de salário&#10;    - `skills`: tecnologias/habilidades&#10;    - `requirements`: requisitos&#10;    - `benefits`: benefícios&#10;  - `pagination`: configuração para navegar por múltiplas páginas:&#10;    - `type`: tipo de paginação (`next_button`, `numbered_links`, ou `url_pattern`)&#10;    - `max_pages`: máximo de páginas a percorrer&#10;    - Para `next_button`: `next_selector` (seletor do botão próxima)&#10;    - Para `numbered_links`: `links_selector` (seletor dos links de página)&#10;    - Para `url_pattern`: `url_pattern` (padrão da URL com `{page}`)&#10;&#10;### Exemplo de Configuração Completa&#10;&#10;```yaml&#10;skills:&#10;  - Python&#10;  - JavaScript&#10;  - Docker&#10;salary:&#10;  usd: 3000&#10;  brl: 6000&#10;&#10;sites:&#10;  - name: &quot;Remotar&quot;&#10;    url: &quot;https://remotar.com.br/search/jobs?q=desenvolvedor&quot;&#10;    job_selector: &quot;div.job-card&quot;&#10;    &#10;    # Campos básicos da listagem&#10;    fields:&#10;      title: &quot;h2&quot;&#10;      company: &quot;.company&quot;&#10;      link: &quot;a&quot;  # Link para página individual&#10;    &#10;    # Campos detalhados da página individual&#10;    detail_fields:&#10;      description: &quot;.job-description&quot;&#10;      salary: &quot;.salary-info&quot;&#10;      skills: &quot;.required-skills .tag&quot;&#10;      requirements: &quot;.requirements&quot;&#10;      benefits: &quot;.benefits&quot;&#10;    &#10;    # Configuração de paginação&#10;    pagination:&#10;      type: &quot;next_button&quot;&#10;      next_selector: &quot;.pagination .next&quot;&#10;      max_pages: 5&#10;```&#10;&#10;### Tipos de Paginação&#10;&#10;#### Botão &quot;Próxima&quot;&#10;```yaml&#10;pagination:&#10;  type: &quot;next_button&quot;&#10;  next_selector: &quot;.pagination .next&quot;&#10;  max_pages: 5&#10;```&#10;&#10;#### Links Numerados&#10;```yaml&#10;pagination:&#10;  type: &quot;numbered_links&quot;&#10;  links_selector: &quot;.pagination a&quot;&#10;  max_pages: 10&#10;```&#10;&#10;#### Padrão de URL&#10;```yaml&#10;pagination:&#10;  type: &quot;url_pattern&quot;&#10;  url_pattern: &quot;https://site.com/jobs?page={page}&quot;&#10;  max_pages: 5&#10;```&#10;&#10;Adapte estes campos conforme a estrutura HTML do site que deseja consultar.&#10;&#10;## Saídas&#10;&#10;Para cada vaga aprovada pelos filtros, é criado um diretório `outputs/job_N/` contendo:&#10;&#10;- `job.md`: resumo em Markdown com os dados coletados.&#10;- `resume.tex`: currículo ajustado em LaTeX.&#10;- `resume.pdf`: currículo compilado.&#10;&#10;Assim, você obtém um PDF personalizado para cada vaga remota filtrada.&#10;&#10;## Logs e Monitoramento&#10;&#10;O sistema fornece logs detalhados durante a execução:&#10;&#10;```&#10;Scraping Remotar...&#10;Found 2 additional pages to scrape&#10;Scraping page: https://remotar.com.br/search/jobs?q=desenvolvedor&#10;Found 10 job listings on this page&#10;Scraping details for: Desenvolvedor Python Sênior&#10;Scraping details for: Desenvolvedor Frontend React&#10;...&#10;Total jobs found: 25&#10;```&#10;&#10;## Dicas para Configuração&#10;&#10;1. **Teste os seletores**: Use as ferramentas de desenvolvedor do navegador para testar os seletores CSS&#10;2. **URLs relativas**: O sistema automaticamente converte URLs relativas em absolutas&#10;3. **Campos opcionais**: Se um campo não for encontrado, será definido como `None`&#10;4. **Paginação cautelosa**: Comece com `max_pages` baixo para testar&#10;5. **Rate limiting**: O sistema já inclui delays automáticos para ser respeitoso com os servidores" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SCRAPING_GUIDE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SCRAPING_GUIDE.md" />
              <option name="updatedContent" value="# Guia de Web Scraping Avançado&#10;&#10;Este guia explica como usar as funcionalidades avançadas do web scraping implementadas no projeto.&#10;&#10;## Funcionalidades Implementadas&#10;&#10;### 1. Extração de Páginas Individuais de Vagas&#10;&#10;O sistema agora pode seguir links das vagas para extrair informações mais detalhadas das páginas individuais.&#10;&#10;#### Como Configurar:&#10;&#10;```yaml&#10;sites:&#10;  - name: &quot;Nome do Site&quot;&#10;    url: &quot;URL da página de listagem&quot;&#10;    job_selector: &quot;seletor CSS para cada vaga&quot;&#10;    fields:&#10;      title: &quot;seletor para título&quot;&#10;      company: &quot;seletor para empresa&quot;&#10;      link: &quot;seletor para o link da vaga&quot;  # IMPORTANTE: Campo obrigatório&#10;    detail_fields:  # Campos extraídos da página individual&#10;      description: &quot;seletor para descrição completa&quot;&#10;      salary: &quot;seletor para salário&quot;&#10;      skills: &quot;seletor para skills&quot;&#10;      requirements: &quot;seletor para requisitos&quot;&#10;      benefits: &quot;seletor para benefícios&quot;&#10;```&#10;&#10;### 2. Navegação por Páginas (Paginação)&#10;&#10;O sistema suporta três tipos de paginação:&#10;&#10;#### Tipo 1: Botão &quot;Próxima&quot;&#10;```yaml&#10;pagination:&#10;  type: &quot;next_button&quot;&#10;  next_selector: &quot;.pagination .next&quot;  # Seletor do botão &quot;próxima&quot;&#10;  max_pages: 5  # Máximo de páginas a percorrer&#10;```&#10;&#10;#### Tipo 2: Links Numerados&#10;```yaml&#10;pagination:&#10;  type: &quot;numbered_links&quot;&#10;  links_selector: &quot;.pagination a&quot;  # Seletor dos links de página&#10;  max_pages: 10&#10;```&#10;&#10;#### Tipo 3: Padrão de URL&#10;```yaml&#10;pagination:&#10;  type: &quot;url_pattern&quot;&#10;  url_pattern: &quot;https://site.com/jobs?page={page}&quot;  # {page} será substituído&#10;  max_pages: 5&#10;```&#10;&#10;## Exemplo de Configuração Completa&#10;&#10;```yaml&#10;skills:&#10;  - Python&#10;  - JavaScript&#10;  - Docker&#10;salary:&#10;  usd: 3000&#10;  brl: 6000&#10;&#10;sites:&#10;  - name: &quot;Site Exemplo&quot;&#10;    url: &quot;https://exemplo.com/vagas&quot;&#10;    job_selector: &quot;.vaga-card&quot;&#10;    &#10;    # Campos básicos da listagem&#10;    fields:&#10;      title: &quot;h2.titulo&quot;&#10;      company: &quot;.empresa&quot;&#10;      link: &quot;a.ver-mais&quot;  # Link para página individual&#10;    &#10;    # Campos detalhados da página individual&#10;    detail_fields:&#10;      description: &quot;.descricao-completa&quot;&#10;      salary: &quot;.salario&quot;&#10;      skills: &quot;.tecnologias .tag&quot;&#10;      requirements: &quot;.requisitos&quot;&#10;      benefits: &quot;.beneficios&quot;&#10;    &#10;    # Configuração de paginação&#10;    pagination:&#10;      type: &quot;next_button&quot;&#10;      next_selector: &quot;.proxima-pagina&quot;&#10;      max_pages: 3&#10;```&#10;&#10;## Funcionalidades de Segurança&#10;&#10;- **Rate Limiting**: Delay automático entre requisições (1 segundo entre páginas, 0.5 segundo entre vagas individuais)&#10;- **User-Agent**: Headers realistas para evitar bloqueios&#10;- **Error Handling**: Tratamento de erros para continuar o scraping mesmo se algumas páginas falharem&#10;- **Timeout**: Timeout de 30 segundos por requisição&#10;&#10;## Logs e Monitoramento&#10;&#10;O sistema agora fornece logs detalhados:&#10;- Número de páginas encontradas&#10;- Progresso do scraping por página&#10;- Erros encontrados&#10;- Total de vagas coletadas&#10;&#10;## Dicas para Configuração&#10;&#10;1. **Teste os seletores**: Use as ferramentas de desenvolvedor do navegador para testar os seletores CSS&#10;2. **URLs relativas**: O sistema automaticamente converte URLs relativas em absolutas&#10;3. **Campos opcionais**: Se um campo não for encontrado, será definido como `None`&#10;4. **Paginação cautelosa**: Comece com `max_pages` baixo para testar&#10;&#10;## Exemplo de Execução&#10;&#10;```bash&#10;cd scripts&#10;python scrape_jobs.py --config ../config/job_config.yaml&#10;```&#10;&#10;O output mostrará o progresso:&#10;```&#10;Scraping Remotar...&#10;Found 2 additional pages to scrape&#10;Scraping page: https://remotar.com.br/search/jobs?q=desenvolvedor&#10;Found 10 job listings on this page&#10;Scraping details for: Desenvolvedor Python Sênior&#10;Scraping details for: Desenvolvedor Frontend React&#10;...&#10;Total jobs found: 25&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  resume-generator:&#10;    build: .&#10;    container_name: curriculo-generator&#10;    volumes:&#10;      # Mount the outputs directory to persist generated resumes&#10;      - ./outputs:/app/outputs&#10;      # Mount config directory for easy configuration changes&#10;      - ./config:/app/config&#10;    environment:&#10;      - DISPLAY=:99&#10;      - GEMINI_API_KEY=${GEMINI_API_KEY}&#10;    # Keep container running for interactive use&#10;    stdin_open: true&#10;    tty: true" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_skills.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_skills.py" />
              <option name="updatedContent" value="#!/usr/bin/env python3&#10;&#10;import sys&#10;sys.path.append('/home/victor/webpages/curriculo/scripts')&#10;&#10;from scrape_jobs import _check_skills_match&#10;&#10;# Teste da nova funcionalidade de skills obrigatórias/opcionais&#10;def test_skills_logic():&#10;    print(&quot;=== Testando Lógica de Skills ===&quot;)&#10;    &#10;    # Configuração de exemplo&#10;    skills_config = [&#10;        {&quot;name&quot;: &quot;Python&quot;, &quot;required&quot;: True},&#10;        {&quot;name&quot;: &quot;SQL&quot;, &quot;required&quot;: True},&#10;        {&quot;name&quot;: &quot;Docker&quot;, &quot;required&quot;: False},&#10;        {&quot;name&quot;: &quot;React&quot;, &quot;required&quot;: False},&#10;        &quot;Git&quot;,  # Formato antigo (opcional)&#10;        &quot;Linux&quot;&#10;    ]&#10;    &#10;    # Teste 1: Vaga que tem skills obrigatórias&#10;    job_text1 = &quot;Desenvolvedor Python com conhecimento em SQL e bancos de dados&quot;&#10;    result1 = _check_skills_match(job_text1, skills_config)&#10;    print(f&quot;Teste 1 - Vaga com Python e SQL: {result1} ✓&quot;)&#10;    &#10;    # Teste 2: Vaga que não tem skills obrigatórias &#10;    job_text2 = &quot;Desenvolvedor JavaScript com React e Docker&quot;&#10;    result2 = _check_skills_match(job_text2, skills_config)&#10;    print(f&quot;Teste 2 - Vaga sem Python/SQL: {result2} ✗&quot;)&#10;    &#10;    # Teste 3: Vaga com apenas uma skill obrigatória&#10;    job_text3 = &quot;Programador Python para desenvolvimento web&quot;&#10;    result3 = _check_skills_match(job_text3, skills_config)&#10;    print(f&quot;Teste 3 - Vaga só com Python: {result3} ✗&quot;)&#10;    &#10;    # Teste 4: Vaga com skills obrigatórias + opcionais&#10;    job_text4 = &quot;Desenvolvedor Python e SQL com experiência em Git&quot;&#10;    result4 = _check_skills_match(job_text4, skills_config)&#10;    print(f&quot;Teste 4 - Vaga com obrigatórias + Git: {result4} ✓&quot;)&#10;    &#10;    print(&quot;\n=== Resumo ===&quot;)&#10;    print(&quot;- Para passar no filtro, a vaga DEVE conter TODAS as skills obrigatórias&quot;)&#10;    print(&quot;- Skills opcionais servem como bônus, mas não são suficientes sozinhas&quot;)&#10;    print(&quot;- Formato antigo (string simples) continua funcionando como opcional&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    test_skills_logic()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>